/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Signer,
  utils,
  Contract,
  ContractFactory,
  BigNumberish,
  Overrides,
} from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../common";
import type { Defi, DefiInterface } from "../Defi";

const _abi = [
  {
    inputs: [
      {
        internalType: "uint256",
        name: "_totalBandwidth",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "_reservePrice",
        type: "uint256",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [],
    name: "allocateBandwidth",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    name: "bandwidthAllocation",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    name: "bandwidthRequested",
    outputs: [
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
      {
        internalType: "bool",
        name: "isGuaranteed",
        type: "bool",
      },
      {
        internalType: "uint256",
        name: "timeSinceUpdate",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "currentPrice",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "costIncurred",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "bandwidth",
        type: "uint256",
      },
      {
        internalType: "bool",
        name: "isGuaranteed",
        type: "bool",
      },
    ],
    name: "getBandwidthPricing",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "hasUpdate",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "bandwidth",
        type: "uint256",
      },
      {
        internalType: "bool",
        name: "isGuaranteed",
        type: "bool",
      },
    ],
    name: "requestBandwidth",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "reservePrice",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "terminateSession",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "totalBandwidth",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "totalGuaranteedBandwidthRequested",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "totalStandardBandwidthRequested",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    name: "users",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
];

const _bytecode =
  "0x60806040523480156200001157600080fd5b506040516200155e3803806200155e8339818101604052810190620000379190620000b8565b8160058190555080600681905550600060048190555060006003819055506000600760006101000a81548160ff0219169083151502179055505050620000ff565b600080fd5b6000819050919050565b62000092816200007d565b81146200009e57600080fd5b50565b600081519050620000b28162000087565b92915050565b60008060408385031215620000d257620000d162000078565b5b6000620000e285828601620000a1565b9250506020620000f585828601620000a1565b9150509250929050565b61144f806200010f6000396000f3fe608060405234801561001057600080fd5b50600436106100b45760003560e01c80637587bae3116100715780637587bae31461019357806395f6efd0146101b1578063c419dc13146101e1578063db2e1eed146101eb578063e3b8f7fe14610209578063f88051f214610225576100b4565b8063132b3a95146100b95780632b79c26e146100c357806333d7332d146100f3578063365b98b2146101115780634fef04b1146101415780636372ea0414610175575b600080fd5b6100c1610243565b005b6100dd60048036038101906100d89190610f93565b610609565b6040516100ea9190610fe2565b60405180910390f35b6100fb610691565b604051610108919061100c565b60405180910390f35b61012b60048036038101906101269190611027565b6106a4565b6040516101389190611095565b60405180910390f35b61015b600480360381019061015691906110dc565b6106e3565b60405161016c959493929190611109565b60405180910390f35b61017d610726565b60405161018a9190610fe2565b60405180910390f35b61019b61072c565b6040516101a89190610fe2565b60405180910390f35b6101cb60048036038101906101c691906110dc565b610732565b6040516101d89190610fe2565b60405180910390f35b6101e961074a565b005b6101f3610bc3565b6040516102009190610fe2565b60405180910390f35b610223600480360381019061021e9190610f93565b610bc9565b005b61022d610f1a565b60405161023a9190610fe2565b60405180910390f35b600033905060005b6002805490508110156103d5578173ffffffffffffffffffffffffffffffffffffffff16600282815481106102835761028261115c565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614156103c257600260016002805490506102de91906111ba565b815481106102ef576102ee61115c565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff166002828154811061032e5761032d61115c565b5b9060005260206000200160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506002805480610388576103876111ee565b5b6001900381819060005260206000200160006101000a81549073ffffffffffffffffffffffffffffffffffffffff021916905590556103d5565b80806103cd9061121d565b91505061024b565b506000808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600090556000600160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000154111561060657600160008273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060010160009054906101000a900460ff161561051857600160008273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600001546004600082825461050c91906111ba565b92505081905550610574565b600160008273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600001546003600082825461056c91906111ba565b925050819055505b600160008273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000808201600090556001820160006101000a81549060ff021916905560028201600090556003820160009055600482016000905550506001600760006101000a81548160ff0219169083151502179055505b50565b6000811561067a57600060045460055461062391906111ba565b9050600081856003546106369190611266565b8661064191906112eb565b61064b919061131c565b905084818660065461065d919061131c565b61066791906112eb565b610671919061131c565b9250505061068b565b82600654610688919061131c565b90505b92915050565b600760009054906101000a900460ff1681565b600281815481106106b457600080fd5b906000526020600020016000915054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60016020528060005260406000206000915090508060000154908060010160009054906101000a900460ff16908060020154908060030154908060040154905085565b60055481565b60045481565b60006020528060005260406000206000915090505481565b60055460045411156108b35760006003546004546107689190611266565b905060005b6002805490508110156108ac5760006005548360016000600286815481106107985761079761115c565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000015461080b91906112eb565b610815919061131c565b9050806000806002858154811061082f5761082e61115c565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055505080806108a49061121d565b91505061076d565b5050610ba6565b60006004546005546108c591906111ba565b905060005b600280549050811015610ba35760016000600283815481106108ef576108ee61115c565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060010160009054906101000a900460ff1615610a705760016000600283815481106109825761098161115c565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000015460008060028481548110610a0257610a0161115c565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550610b90565b6000826003546001600060028681548110610a8e57610a8d61115c565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000154610b0191906112eb565b610b0b919061131c565b90508060008060028581548110610b2557610b2461115c565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550505b8080610b9b9061121d565b9150506108ca565b50505b6000600760006101000a81548160ff021916908315150217905550565b60065481565b60008211610c0c576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610c03906113f9565b60405180910390fd5b6000610c188383610609565b90506000600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600001541415610d81576002339080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506040518060a0016040528084815260200183151581526020014281526020018281526020016000815250600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000820151816000015560208201518160010160006101000a81548160ff021916908315150217905550604082015181600201556060820151816003015560808201518160040155905050610efa565b6000600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206040518060a0016040529081600082015481526020016001820160009054906101000a900460ff16151515158152602001600282015481526020016003820154815260200160048201548152505090506000816040015142610e2491906111ba565b8260600151610e33919061131c565b8260800151610e429190611266565b90506040518060a00160405280868152602001851515815260200142815260200184815260200182815250600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000820151816000015560208201518160010160006101000a81548160ff02191690831515021790555060408201518160020155606082015181600301556080820151816004015590505050505b6001600760006101000a81548160ff021916908315150217905550505050565b60035481565b600080fd5b6000819050919050565b610f3881610f25565b8114610f4357600080fd5b50565b600081359050610f5581610f2f565b92915050565b60008115159050919050565b610f7081610f5b565b8114610f7b57600080fd5b50565b600081359050610f8d81610f67565b92915050565b60008060408385031215610faa57610fa9610f20565b5b6000610fb885828601610f46565b9250506020610fc985828601610f7e565b9150509250929050565b610fdc81610f25565b82525050565b6000602082019050610ff76000830184610fd3565b92915050565b61100681610f5b565b82525050565b60006020820190506110216000830184610ffd565b92915050565b60006020828403121561103d5761103c610f20565b5b600061104b84828501610f46565b91505092915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600061107f82611054565b9050919050565b61108f81611074565b82525050565b60006020820190506110aa6000830184611086565b92915050565b6110b981611074565b81146110c457600080fd5b50565b6000813590506110d6816110b0565b92915050565b6000602082840312156110f2576110f1610f20565b5b6000611100848285016110c7565b91505092915050565b600060a08201905061111e6000830188610fd3565b61112b6020830187610ffd565b6111386040830186610fd3565b6111456060830185610fd3565b6111526080830184610fd3565b9695505050505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60006111c582610f25565b91506111d083610f25565b9250828210156111e3576111e261118b565b5b828203905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603160045260246000fd5b600061122882610f25565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82141561125b5761125a61118b565b5b600182019050919050565b600061127182610f25565b915061127c83610f25565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff038211156112b1576112b061118b565b5b828201905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b60006112f682610f25565b915061130183610f25565b925082611311576113106112bc565b5b828204905092915050565b600061132782610f25565b915061133283610f25565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff048311821515161561136b5761136a61118b565b5b828202905092915050565b600082825260208201905092915050565b7f5265717565737465642062616e647769647468206d757374206265206d6f726560008201527f207468616e203000000000000000000000000000000000000000000000000000602082015250565b60006113e3602783611376565b91506113ee82611387565b604082019050919050565b60006020820190508181036000830152611412816113d6565b905091905056fea2646970667358221220e4ee0968dcd03f071ed00eda427dae771600d1dc8025e40c8c07e2e3f27cf09b64736f6c63430008090033";

type DefiConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: DefiConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class Defi__factory extends ContractFactory {
  constructor(...args: DefiConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    _totalBandwidth: PromiseOrValue<BigNumberish>,
    _reservePrice: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<Defi> {
    return super.deploy(
      _totalBandwidth,
      _reservePrice,
      overrides || {}
    ) as Promise<Defi>;
  }
  override getDeployTransaction(
    _totalBandwidth: PromiseOrValue<BigNumberish>,
    _reservePrice: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(
      _totalBandwidth,
      _reservePrice,
      overrides || {}
    );
  }
  override attach(address: string): Defi {
    return super.attach(address) as Defi;
  }
  override connect(signer: Signer): Defi__factory {
    return super.connect(signer) as Defi__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): DefiInterface {
    return new utils.Interface(_abi) as DefiInterface;
  }
  static connect(address: string, signerOrProvider: Signer | Provider): Defi {
    return new Contract(address, _abi, signerOrProvider) as Defi;
  }
}
