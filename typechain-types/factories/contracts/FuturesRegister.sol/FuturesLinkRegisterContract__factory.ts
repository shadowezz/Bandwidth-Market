/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Signer,
  utils,
  Contract,
  ContractFactory,
  BigNumberish,
  Overrides,
} from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../../common";
import type {
  FuturesLinkRegisterContract,
  FuturesLinkRegisterContractInterface,
} from "../../../contracts/FuturesRegister.sol/FuturesLinkRegisterContract";

const _abi = [
  {
    inputs: [
      {
        internalType: "uint256",
        name: "validTimestampCount",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "totalSupply",
        type: "uint256",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "timeSlotAhead",
        type: "uint256",
      },
      {
        internalType: "address",
        name: "account",
        type: "address",
      },
    ],
    name: "getBalance",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "getTotalSupply",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "timestamp",
        type: "uint256",
      },
      {
        internalType: "address[]",
        name: "users",
        type: "address[]",
      },
      {
        internalType: "uint256[]",
        name: "bandwidthAllocations",
        type: "uint256[]",
      },
      {
        internalType: "uint256",
        name: "linkCapacity",
        type: "uint256",
      },
    ],
    name: "sendLatestAllocation",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "timeSlotAhead",
        type: "uint256",
      },
      {
        internalType: "address",
        name: "from",
        type: "address",
      },
      {
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "transfer",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
];

const _bytecode =
  "0x60806040523480156200001157600080fd5b5060405162000c2e38038062000c2e8339818101604052810190620000379190620000da565b60005b82811015620000835760026000908060018154018082558091505060019003906000526020600020016000909190919091505580806200007a9062000150565b9150506200003a565b50816003819055508060018190555050506200019e565b600080fd5b6000819050919050565b620000b4816200009f565b8114620000c057600080fd5b50565b600081519050620000d481620000a9565b92915050565b60008060408385031215620000f457620000f36200009a565b5b60006200010485828601620000c3565b92505060206200011785828601620000c3565b9150509250929050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60006200015d826200009f565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82141562000193576200019262000121565b5b600182019050919050565b610a8080620001ae6000396000f3fe608060405234801561001057600080fd5b506004361061004c5760003560e01c806336cd52a614610051578063a967443c1461006d578063b0a7945914610089578063c4e41b22146100b9575b600080fd5b61006b60048036038101906100669190610546565b6100d7565b005b61008760048036038101906100829190610668565b610290565b005b6100a3600480360381019061009e919061070f565b61040d565b6040516100b0919061075e565b60405180910390f35b6100c161049e565b6040516100ce919061075e565b60405180910390f35b6000600285815481106100ed576100ec610779565b5b90600052602060002001549050600081141561013e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161013590610805565b60405180910390fd5b600080600083815260200190815260200160002060008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050828110156101d5576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016101cc90610897565b60405180910390fd5b82810360008084815260200190815260200160002060008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508260008084815260200190815260200160002060008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282540192505081905550505050505050565b60005b8585905081101561035d57816001548585848181106102b5576102b4610779565b5b905060200201356102c691906108e6565b6102d0919061096f565b60008089815260200190815260200160002060008888858181106102f7576102f6610779565b5b905060200201602081019061030c91906109a0565b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508080610355906109cd565b915050610293565b50600060035490506000600190505b818110156103d4576002818154811061038857610387610779565b5b906000526020600020015460026001836103a29190610a16565b815481106103b3576103b2610779565b5b906000526020600020018190555080806103cc906109cd565b91505061036c565b508660026001836103e59190610a16565b815481106103f6576103f5610779565b5b906000526020600020018190555050505050505050565b6000806002848154811061042457610423610779565b5b906000526020600020015490506000811415610444576000915050610498565b60008082815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549150505b92915050565b6000600154905090565b600080fd5b600080fd5b6000819050919050565b6104c5816104b2565b81146104d057600080fd5b50565b6000813590506104e2816104bc565b92915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000610513826104e8565b9050919050565b61052381610508565b811461052e57600080fd5b50565b6000813590506105408161051a565b92915050565b600080600080608085870312156105605761055f6104a8565b5b600061056e878288016104d3565b945050602061057f87828801610531565b935050604061059087828801610531565b92505060606105a1878288016104d3565b91505092959194509250565b600080fd5b600080fd5b600080fd5b60008083601f8401126105d2576105d16105ad565b5b8235905067ffffffffffffffff8111156105ef576105ee6105b2565b5b60208301915083602082028301111561060b5761060a6105b7565b5b9250929050565b60008083601f840112610628576106276105ad565b5b8235905067ffffffffffffffff811115610645576106446105b2565b5b602083019150836020820283011115610661576106606105b7565b5b9250929050565b60008060008060008060808789031215610685576106846104a8565b5b600061069389828a016104d3565b965050602087013567ffffffffffffffff8111156106b4576106b36104ad565b5b6106c089828a016105bc565b9550955050604087013567ffffffffffffffff8111156106e3576106e26104ad565b5b6106ef89828a01610612565b9350935050606061070289828a016104d3565b9150509295509295509295565b60008060408385031215610726576107256104a8565b5b6000610734858286016104d3565b925050602061074585828601610531565b9150509250929050565b610758816104b2565b82525050565b6000602082019050610773600083018461074f565b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b600082825260208201905092915050565b7f6e6f20746f6b656e732079657400000000000000000000000000000000000000600082015250565b60006107ef600d836107a8565b91506107fa826107b9565b602082019050919050565b6000602082019050818103600083015261081e816107e2565b9050919050565b7f42616e647769647468546f6b656e3a207472616e7366657220616d6f756e742060008201527f657863656564732062616c616e63650000000000000000000000000000000000602082015250565b6000610881602f836107a8565b915061088c82610825565b604082019050919050565b600060208201905081810360008301526108b081610874565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60006108f1826104b2565b91506108fc836104b2565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0483118215151615610935576109346108b7565b5b828202905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b600061097a826104b2565b9150610985836104b2565b92508261099557610994610940565b5b828204905092915050565b6000602082840312156109b6576109b56104a8565b5b60006109c484828501610531565b91505092915050565b60006109d8826104b2565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff821415610a0b57610a0a6108b7565b5b600182019050919050565b6000610a21826104b2565b9150610a2c836104b2565b925082821015610a3f57610a3e6108b7565b5b82820390509291505056fea26469706673582212203006b8468e5d48236342f102e4e31863c4fbb01043dd9d3391a80f78e842c74a64736f6c63430008090033";

type FuturesLinkRegisterContractConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: FuturesLinkRegisterContractConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class FuturesLinkRegisterContract__factory extends ContractFactory {
  constructor(...args: FuturesLinkRegisterContractConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    validTimestampCount: PromiseOrValue<BigNumberish>,
    totalSupply: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<FuturesLinkRegisterContract> {
    return super.deploy(
      validTimestampCount,
      totalSupply,
      overrides || {}
    ) as Promise<FuturesLinkRegisterContract>;
  }
  override getDeployTransaction(
    validTimestampCount: PromiseOrValue<BigNumberish>,
    totalSupply: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(
      validTimestampCount,
      totalSupply,
      overrides || {}
    );
  }
  override attach(address: string): FuturesLinkRegisterContract {
    return super.attach(address) as FuturesLinkRegisterContract;
  }
  override connect(signer: Signer): FuturesLinkRegisterContract__factory {
    return super.connect(signer) as FuturesLinkRegisterContract__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): FuturesLinkRegisterContractInterface {
    return new utils.Interface(_abi) as FuturesLinkRegisterContractInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): FuturesLinkRegisterContract {
    return new Contract(
      address,
      _abi,
      signerOrProvider
    ) as FuturesLinkRegisterContract;
  }
}
