/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Signer,
  utils,
  Contract,
  ContractFactory,
  BigNumberish,
  Overrides,
} from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../../common";
import type {
  FuturesLinkContract,
  FuturesLinkContractInterface,
} from "../../../contracts/FuturesLink.sol/FuturesLinkContract";

const _abi = [
  {
    inputs: [
      {
        internalType: "address",
        name: "registerAddress",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "_linkCapacity",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "_timeInterval",
        type: "uint256",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "address[]",
        name: "users",
        type: "address[]",
      },
      {
        indexed: false,
        internalType: "uint256[]",
        name: "amounts",
        type: "uint256[]",
      },
    ],
    name: "TokensReallocated",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "uint256",
        name: "originalValue",
        type: "uint256",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "newValue",
        type: "uint256",
      },
    ],
    name: "TotalBidChanged",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "bid",
        type: "uint256",
      },
    ],
    name: "acceptNewBid",
    outputs: [],
    stateMutability: "payable",
    type: "function",
  },
  {
    inputs: [],
    name: "allocateBandwidth",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "currentTimestamp",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "currentTotalBid",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "getUserCurrentBid",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "hasUserBidded",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "linkCapacity",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "previousTotalBid",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "timeInterval",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "newBid",
        type: "uint256",
      },
    ],
    name: "updateBid",
    outputs: [],
    stateMutability: "payable",
    type: "function",
  },
];

const _bytecode =
  "";

type FuturesLinkContractConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: FuturesLinkContractConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class FuturesLinkContract__factory extends ContractFactory {
  constructor(...args: FuturesLinkContractConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    registerAddress: PromiseOrValue<string>,
    _linkCapacity: PromiseOrValue<BigNumberish>,
    _timeInterval: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<FuturesLinkContract> {
    return super.deploy(
      registerAddress,
      _linkCapacity,
      _timeInterval,
      overrides || {}
    ) as Promise<FuturesLinkContract>;
  }
  override getDeployTransaction(
    registerAddress: PromiseOrValue<string>,
    _linkCapacity: PromiseOrValue<BigNumberish>,
    _timeInterval: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(
      registerAddress,
      _linkCapacity,
      _timeInterval,
      overrides || {}
    );
  }
  override attach(address: string): FuturesLinkContract {
    return super.attach(address) as FuturesLinkContract;
  }
  override connect(signer: Signer): FuturesLinkContract__factory {
    return super.connect(signer) as FuturesLinkContract__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): FuturesLinkContractInterface {
    return new utils.Interface(_abi) as FuturesLinkContractInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): FuturesLinkContract {
    return new Contract(address, _abi, signerOrProvider) as FuturesLinkContract;
  }
}
