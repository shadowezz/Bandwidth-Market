/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Signer,
  utils,
  Contract,
  ContractFactory,
  BigNumberish,
  Overrides,
} from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../common";
import type { DefiV1, DefiV1Interface } from "../../contracts/DefiV1";

const _abi = [
  {
    inputs: [
      {
        internalType: "uint256",
        name: "_totalBandwidth",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "startingPrice",
        type: "uint256",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "address[]",
        name: "users",
        type: "address[]",
      },
      {
        indexed: false,
        internalType: "uint256[]",
        name: "allocation",
        type: "uint256[]",
      },
    ],
    name: "AllocateBandwidth",
    type: "event",
  },
  {
    inputs: [],
    name: "allocateBandwidth",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    name: "bids",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "getMarketPrice",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "getUsers",
    outputs: [
      {
        internalType: "address[]",
        name: "",
        type: "address[]",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "marketPrice",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "bid",
        type: "uint256",
      },
    ],
    name: "placeBid",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "totalBandwidth",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "totalBidAmount",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    name: "users",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
];

const _bytecode =
  "0x608060405234801561001057600080fd5b50604051610dbd380380610dbd8339818101604052810190610032919061008a565b8160038190555080600481905550600060028190555050506100ca565b600080fd5b6000819050919050565b61006781610054565b811461007257600080fd5b50565b6000815190506100848161005e565b92915050565b600080604083850312156100a1576100a061004f565b5b60006100af85828601610075565b92505060206100c085828601610075565b9150509250929050565b610ce4806100d96000396000f3fe608060405234801561001057600080fd5b50600436106100925760003560e01c80636372ea04116100665780636372ea0414610133578063660e16c3146101515780639979ef451461016f578063c419dc131461018b578063ee7a11631461019557610092565b8062ce8e3e14610097578063365b98b2146100b557806345a15388146100e557806362ea82db14610103575b600080fd5b61009f6101b3565b6040516100ac91906106c7565b60405180910390f35b6100cf60048036038101906100ca9190610724565b610241565b6040516100dc9190610760565b60405180910390f35b6100ed610280565b6040516100fa919061078a565b60405180910390f35b61011d600480360381019061011891906107d1565b610286565b60405161012a919061078a565b60405180910390f35b61013b61029e565b604051610148919061078a565b60405180910390f35b6101596102a4565b604051610166919061078a565b60405180910390f35b61018960048036038101906101849190610724565b6102ae565b005b6101936103b9565b005b61019d610593565b6040516101aa919061078a565b60405180910390f35b6060600180548060200260200160405190810160405280929190818152602001828054801561023757602002820191906000526020600020905b8160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190600101908083116101ed575b5050505050905090565b6001818154811061025157600080fd5b906000526020600020016000915054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60045481565b60006020528060005260406000206000915090505481565b60035481565b6000600454905090565b600081116102f1576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016102e89061085b565b60405180910390fd5b6000339050816000808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055506001819080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555081600260008282546103ae91906108aa565b925050819055505050565b6000600254116103fe576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016103f59061094c565b60405180910390fd5b600060018054905067ffffffffffffffff81111561041f5761041e61096c565b5b60405190808252806020026020018201604052801561044d5781602001602082028036833780820191505090505b50905060005b600180549050811015610529576002546003546000806001858154811061047d5761047c61099b565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546104ed91906109ca565b6104f79190610a53565b82828151811061050a5761050961099b565b5b602002602001018181525050808061052190610a84565b915050610453565b5060035460025461053a9190610a53565b6004819055507fd4173d45d457feb6597f56bac732ea07554cabbbb48bdf87ae47136f7aa9516c600182604051610572929190610c77565b60405180910390a16000600281905550600160006105909190610599565b50565b60025481565b50805460008255906000526020600020908101906105b791906105ba565b50565b5b808211156105d35760008160009055506001016105bb565b5090565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600061062e82610603565b9050919050565b61063e81610623565b82525050565b60006106508383610635565b60208301905092915050565b6000602082019050919050565b6000610674826105d7565b61067e81856105e2565b9350610689836105f3565b8060005b838110156106ba5781516106a18882610644565b97506106ac8361065c565b92505060018101905061068d565b5085935050505092915050565b600060208201905081810360008301526106e18184610669565b905092915050565b600080fd5b6000819050919050565b610701816106ee565b811461070c57600080fd5b50565b60008135905061071e816106f8565b92915050565b60006020828403121561073a576107396106e9565b5b60006107488482850161070f565b91505092915050565b61075a81610623565b82525050565b60006020820190506107756000830184610751565b92915050565b610784816106ee565b82525050565b600060208201905061079f600083018461077b565b92915050565b6107ae81610623565b81146107b957600080fd5b50565b6000813590506107cb816107a5565b92915050565b6000602082840312156107e7576107e66106e9565b5b60006107f5848285016107bc565b91505092915050565b600082825260208201905092915050565b7f426964206d757374206265206d6f7265207468616e2024300000000000000000600082015250565b60006108456018836107fe565b91506108508261080f565b602082019050919050565b6000602082019050818103600083015261087481610838565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60006108b5826106ee565b91506108c0836106ee565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff038211156108f5576108f461087b565b5b828201905092915050565b7f5468657265206d757374206265206578697374696e6720626964730000000000600082015250565b6000610936601b836107fe565b915061094182610900565b602082019050919050565b6000602082019050818103600083015261096581610929565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60006109d5826106ee565b91506109e0836106ee565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0483118215151615610a1957610a1861087b565b5b828202905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b6000610a5e826106ee565b9150610a69836106ee565b925082610a7957610a78610a24565b5b828204905092915050565b6000610a8f826106ee565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff821415610ac257610ac161087b565b5b600182019050919050565b600081549050919050565b60008190508160005260206000209050919050565b60008160001c9050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000610b2d610b2883610aed565b610afa565b9050919050565b6000610b408254610b1a565b9050919050565b6000600182019050919050565b6000610b5f82610acd565b610b6981856105e2565b9350610b7483610ad8565b8060005b83811015610bac57610b8982610b34565b610b938882610644565b9750610b9e83610b47565b925050600181019050610b78565b5085935050505092915050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b610bee816106ee565b82525050565b6000610c008383610be5565b60208301905092915050565b6000602082019050919050565b6000610c2482610bb9565b610c2e8185610bc4565b9350610c3983610bd5565b8060005b83811015610c6a578151610c518882610bf4565b9750610c5c83610c0c565b925050600181019050610c3d565b5085935050505092915050565b60006040820190508181036000830152610c918185610b54565b90508181036020830152610ca58184610c19565b9050939250505056fea264697066735822122011dce5f65980c164c55d83c5d79f6258c872ad91cae27b60a8f527c6c9dcd40e64736f6c63430008090033";

type DefiV1ConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: DefiV1ConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class DefiV1__factory extends ContractFactory {
  constructor(...args: DefiV1ConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    _totalBandwidth: PromiseOrValue<BigNumberish>,
    startingPrice: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<DefiV1> {
    return super.deploy(
      _totalBandwidth,
      startingPrice,
      overrides || {}
    ) as Promise<DefiV1>;
  }
  override getDeployTransaction(
    _totalBandwidth: PromiseOrValue<BigNumberish>,
    startingPrice: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(
      _totalBandwidth,
      startingPrice,
      overrides || {}
    );
  }
  override attach(address: string): DefiV1 {
    return super.attach(address) as DefiV1;
  }
  override connect(signer: Signer): DefiV1__factory {
    return super.connect(signer) as DefiV1__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): DefiV1Interface {
    return new utils.Interface(_abi) as DefiV1Interface;
  }
  static connect(address: string, signerOrProvider: Signer | Provider): DefiV1 {
    return new Contract(address, _abi, signerOrProvider) as DefiV1;
  }
}
