/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type { FunctionFragment, Result } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "./common";

export interface DefiInterface extends utils.Interface {
  functions: {
    "allocateBandwidth()": FunctionFragment;
    "bandwidthAllocation(address)": FunctionFragment;
    "bandwidthRequested(address)": FunctionFragment;
    "getBandwidthPricing(uint256,bool)": FunctionFragment;
    "hasUpdate()": FunctionFragment;
    "requestBandwidth(uint256,bool)": FunctionFragment;
    "reservePrice()": FunctionFragment;
    "terminateSession()": FunctionFragment;
    "totalBandwidth()": FunctionFragment;
    "totalGuaranteedBandwidthRequested()": FunctionFragment;
    "totalStandardBandwidthRequested()": FunctionFragment;
    "users(uint256)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "allocateBandwidth"
      | "bandwidthAllocation"
      | "bandwidthRequested"
      | "getBandwidthPricing"
      | "hasUpdate"
      | "requestBandwidth"
      | "reservePrice"
      | "terminateSession"
      | "totalBandwidth"
      | "totalGuaranteedBandwidthRequested"
      | "totalStandardBandwidthRequested"
      | "users"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "allocateBandwidth",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "bandwidthAllocation",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "bandwidthRequested",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "getBandwidthPricing",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<boolean>]
  ): string;
  encodeFunctionData(functionFragment: "hasUpdate", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "requestBandwidth",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<boolean>]
  ): string;
  encodeFunctionData(
    functionFragment: "reservePrice",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "terminateSession",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "totalBandwidth",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "totalGuaranteedBandwidthRequested",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "totalStandardBandwidthRequested",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "users",
    values: [PromiseOrValue<BigNumberish>]
  ): string;

  decodeFunctionResult(
    functionFragment: "allocateBandwidth",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "bandwidthAllocation",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "bandwidthRequested",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getBandwidthPricing",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "hasUpdate", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "requestBandwidth",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "reservePrice",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "terminateSession",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalBandwidth",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalGuaranteedBandwidthRequested",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalStandardBandwidthRequested",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "users", data: BytesLike): Result;

  events: {};
}

export interface Defi extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: DefiInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    allocateBandwidth(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    bandwidthAllocation(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    bandwidthRequested(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, boolean, BigNumber, BigNumber, BigNumber] & {
        amount: BigNumber;
        isGuaranteed: boolean;
        timeSinceUpdate: BigNumber;
        currentPrice: BigNumber;
        costIncurred: BigNumber;
      }
    >;

    getBandwidthPricing(
      bandwidth: PromiseOrValue<BigNumberish>,
      isGuaranteed: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    hasUpdate(overrides?: CallOverrides): Promise<[boolean]>;

    requestBandwidth(
      bandwidth: PromiseOrValue<BigNumberish>,
      isGuaranteed: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    reservePrice(overrides?: CallOverrides): Promise<[BigNumber]>;

    terminateSession(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    totalBandwidth(overrides?: CallOverrides): Promise<[BigNumber]>;

    totalGuaranteedBandwidthRequested(
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    totalStandardBandwidthRequested(
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    users(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string]>;
  };

  allocateBandwidth(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  bandwidthAllocation(
    arg0: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  bandwidthRequested(
    arg0: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, boolean, BigNumber, BigNumber, BigNumber] & {
      amount: BigNumber;
      isGuaranteed: boolean;
      timeSinceUpdate: BigNumber;
      currentPrice: BigNumber;
      costIncurred: BigNumber;
    }
  >;

  getBandwidthPricing(
    bandwidth: PromiseOrValue<BigNumberish>,
    isGuaranteed: PromiseOrValue<boolean>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  hasUpdate(overrides?: CallOverrides): Promise<boolean>;

  requestBandwidth(
    bandwidth: PromiseOrValue<BigNumberish>,
    isGuaranteed: PromiseOrValue<boolean>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  reservePrice(overrides?: CallOverrides): Promise<BigNumber>;

  terminateSession(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  totalBandwidth(overrides?: CallOverrides): Promise<BigNumber>;

  totalGuaranteedBandwidthRequested(
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  totalStandardBandwidthRequested(
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  users(
    arg0: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<string>;

  callStatic: {
    allocateBandwidth(overrides?: CallOverrides): Promise<void>;

    bandwidthAllocation(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    bandwidthRequested(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, boolean, BigNumber, BigNumber, BigNumber] & {
        amount: BigNumber;
        isGuaranteed: boolean;
        timeSinceUpdate: BigNumber;
        currentPrice: BigNumber;
        costIncurred: BigNumber;
      }
    >;

    getBandwidthPricing(
      bandwidth: PromiseOrValue<BigNumberish>,
      isGuaranteed: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    hasUpdate(overrides?: CallOverrides): Promise<boolean>;

    requestBandwidth(
      bandwidth: PromiseOrValue<BigNumberish>,
      isGuaranteed: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<void>;

    reservePrice(overrides?: CallOverrides): Promise<BigNumber>;

    terminateSession(overrides?: CallOverrides): Promise<void>;

    totalBandwidth(overrides?: CallOverrides): Promise<BigNumber>;

    totalGuaranteedBandwidthRequested(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    totalStandardBandwidthRequested(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    users(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string>;
  };

  filters: {};

  estimateGas: {
    allocateBandwidth(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    bandwidthAllocation(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    bandwidthRequested(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getBandwidthPricing(
      bandwidth: PromiseOrValue<BigNumberish>,
      isGuaranteed: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    hasUpdate(overrides?: CallOverrides): Promise<BigNumber>;

    requestBandwidth(
      bandwidth: PromiseOrValue<BigNumberish>,
      isGuaranteed: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    reservePrice(overrides?: CallOverrides): Promise<BigNumber>;

    terminateSession(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    totalBandwidth(overrides?: CallOverrides): Promise<BigNumber>;

    totalGuaranteedBandwidthRequested(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    totalStandardBandwidthRequested(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    users(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    allocateBandwidth(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    bandwidthAllocation(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    bandwidthRequested(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getBandwidthPricing(
      bandwidth: PromiseOrValue<BigNumberish>,
      isGuaranteed: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    hasUpdate(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    requestBandwidth(
      bandwidth: PromiseOrValue<BigNumberish>,
      isGuaranteed: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    reservePrice(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    terminateSession(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    totalBandwidth(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    totalGuaranteedBandwidthRequested(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    totalStandardBandwidthRequested(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    users(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
