/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { ethers } from "ethers";
import {
  FactoryOptions,
  HardhatEthersHelpers as HardhatEthersHelpersBase,
} from "@nomiclabs/hardhat-ethers/types";

import * as Contracts from ".";

declare module "hardhat/types/runtime" {
  interface HardhatEthersHelpers extends HardhatEthersHelpersBase {
    getContractFactory(
      name: "KeeperCompatibleInterface",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.KeeperCompatibleInterface__factory>;
    getContractFactory(
      name: "KeeperBase",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.KeeperBase__factory>;
    getContractFactory(
      name: "KeeperCompatible",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.KeeperCompatible__factory>;
    getContractFactory(
      name: "AccessControl",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.AccessControl__factory>;
    getContractFactory(
      name: "IAccessControl",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IAccessControl__factory>;
    getContractFactory(
      name: "ERC20",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC20__factory>;
    getContractFactory(
      name: "IERC20Metadata",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC20Metadata__factory>;
    getContractFactory(
      name: "IERC20",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC20__factory>;
    getContractFactory(
      name: "ERC721",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC721__factory>;
    getContractFactory(
      name: "ERC721URIStorage",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC721URIStorage__factory>;
    getContractFactory(
      name: "IERC721Metadata",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC721Metadata__factory>;
    getContractFactory(
      name: "IERC721",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC721__factory>;
    getContractFactory(
      name: "IERC721Receiver",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC721Receiver__factory>;
    getContractFactory(
      name: "ERC165",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC165__factory>;
    getContractFactory(
      name: "IERC165",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC165__factory>;
    getContractFactory(
      name: "BandwidthMarket",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.BandwidthMarket__factory>;
    getContractFactory(
      name: "BandwidthNFT",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.BandwidthNFT__factory>;
    getContractFactory(
      name: "BandwidthToken",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.BandwidthToken__factory>;
    getContractFactory(
      name: "DefiMain",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.DefiMain__factory>;
    getContractFactory(
      name: "Defi",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Defi__factory>;
    getContractFactory(
      name: "DefiV1",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.DefiV1__factory>;
    getContractFactory(
      name: "DefiV2",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.DefiV2__factory>;
    getContractFactory(
      name: "DefiV3",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.DefiV3__factory>;
    getContractFactory(
      name: "Aion",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Aion__factory>;
    getContractFactory(
      name: "DefiAgent",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.DefiAgent__factory>;
    getContractFactory(
      name: "DefiMain",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.DefiMain__factory>;
    getContractFactory(
      name: "DefiMain",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.DefiMain__factory>;
    getContractFactory(
      name: "FuturesLinkContract",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.FuturesLinkContract__factory>;
    getContractFactory(
      name: "FuturesLinkRegisterContract",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.FuturesLinkRegisterContract__factory>;
    getContractFactory(
      name: "FuturesLinkToken",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.FuturesLinkToken__factory>;
    getContractFactory(
      name: "LinkContract",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.LinkContract__factory>;
    getContractFactory(
      name: "LinkContractV2",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.LinkContractV2__factory>;
    getContractFactory(
      name: "Lock",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Lock__factory>;
    getContractFactory(
      name: "MaliciousContract",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.MaliciousContract__factory>;

    getContractAt(
      name: "KeeperCompatibleInterface",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.KeeperCompatibleInterface>;
    getContractAt(
      name: "KeeperBase",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.KeeperBase>;
    getContractAt(
      name: "KeeperCompatible",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.KeeperCompatible>;
    getContractAt(
      name: "AccessControl",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.AccessControl>;
    getContractAt(
      name: "IAccessControl",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IAccessControl>;
    getContractAt(
      name: "ERC20",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC20>;
    getContractAt(
      name: "IERC20Metadata",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC20Metadata>;
    getContractAt(
      name: "IERC20",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC20>;
    getContractAt(
      name: "ERC721",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC721>;
    getContractAt(
      name: "ERC721URIStorage",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC721URIStorage>;
    getContractAt(
      name: "IERC721Metadata",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC721Metadata>;
    getContractAt(
      name: "IERC721",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC721>;
    getContractAt(
      name: "IERC721Receiver",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC721Receiver>;
    getContractAt(
      name: "ERC165",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC165>;
    getContractAt(
      name: "IERC165",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC165>;
    getContractAt(
      name: "BandwidthMarket",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.BandwidthMarket>;
    getContractAt(
      name: "BandwidthNFT",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.BandwidthNFT>;
    getContractAt(
      name: "BandwidthToken",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.BandwidthToken>;
    getContractAt(
      name: "DefiMain",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.DefiMain>;
    getContractAt(
      name: "Defi",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.Defi>;
    getContractAt(
      name: "DefiV1",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.DefiV1>;
    getContractAt(
      name: "DefiV2",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.DefiV2>;
    getContractAt(
      name: "DefiV3",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.DefiV3>;
    getContractAt(
      name: "Aion",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.Aion>;
    getContractAt(
      name: "DefiAgent",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.DefiAgent>;
    getContractAt(
      name: "DefiMain",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.DefiMain>;
    getContractAt(
      name: "DefiMain",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.DefiMain>;
    getContractAt(
      name: "FuturesLinkContract",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.FuturesLinkContract>;
    getContractAt(
      name: "FuturesLinkRegisterContract",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.FuturesLinkRegisterContract>;
    getContractAt(
      name: "FuturesLinkToken",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.FuturesLinkToken>;
    getContractAt(
      name: "LinkContract",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.LinkContract>;
    getContractAt(
      name: "LinkContractV2",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.LinkContractV2>;
    getContractAt(
      name: "Lock",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.Lock>;
    getContractAt(
      name: "MaliciousContract",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.MaliciousContract>;

    // default types
    getContractFactory(
      name: string,
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<ethers.ContractFactory>;
    getContractFactory(
      abi: any[],
      bytecode: ethers.utils.BytesLike,
      signer?: ethers.Signer
    ): Promise<ethers.ContractFactory>;
    getContractAt(
      nameOrAbi: string | any[],
      address: string,
      signer?: ethers.Signer
    ): Promise<ethers.Contract>;
  }
}
